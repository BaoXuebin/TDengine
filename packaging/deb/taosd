#!/bin/bash
#
# Modified from original source: Elastic Search
# https://github.com/elasticsearch/elasticsearch
# Thank you to the Elastic Search authors
#
# chkconfig: 2345 99 01
#
### BEGIN INIT INFO
# Provides:          TDengine
# Required-Start:    $local_fs $network $syslog
# Required-Stop:     $local_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Starts TDengine taosd
# Description:       Starts TDengine taosd, a time-series database engine
### END INIT INFO

set -e

PATH="/bin:/usr/bin:/sbin:/usr/sbin"
NAME="TDengine"
USER="root"
GROUP="root"
DAEMON="/usr/local/taos/bin/taosd"
DAEMON_NAME="taosd"
DAEMON_OPTS=""

HTTPD_NAME="taosadapter"
DAEMON_HTTPD_NAME=$HTTPD_NAME
DAEMON_HTTPD="/usr/local/taos/bin/$HTTPD_NAME"

PID_FILE="/var/run/$NAME.pid"
APPARGS=""

# Maximum number of open files
MAX_OPEN_FILES=65535

. /lib/lsb/init-functions

UnknownSystem=0
CFG_DIR=/etc/taos
if [ `lsb_release -d | grep NeoKylin | wc -l` == "1" ]; then
    UnknownSystem=1
fi

function start_daemon() {
    PID=`ps -ef | grep $DAEMON_NAME | grep $CFG_DIR | grep -v grep | awk '{print $2}'`
    if [ -n "$PID" ]; then
        echo "taosd is running"
        return
    fi

    nohup $DAEMON -c $CFG_DIR > /dev/null 2>&1 &
    sleep 1

    PID=`ps -ef | grep $DAEMON_NAME | grep $CFG_DIR | grep -v grep | awk '{print $2}'`
    if [ -n "$PID" ]; then
        echo "succeed to start taosd" 
    else
        echo "failed to start taosd"
    fi
}

function stop_daemon() {
    PID=`ps -ef | grep $DAEMON_NAME | grep $CFG_DIR | grep -v grep | awk '{print $2}'`
    if [ -n "$PID" ]; then
        echo "taosd will be stopped"
        while [ -n "$PID" ]
        do
            kill -SIGINT $PID > /dev/null 2>&1 &
            echo "waitting for taosd stop"
            sleep 1
            PID=`ps -ef | grep $DAEMON_NAME | grep $CFG_DIR | grep -v grep | awk '{print $2}'`
        done 
        echo "taosd is stopped"
    else
        echo "taosd is not running"
    fi
}

function status_of_daemon() {
    PID=`ps -ef | grep $DAEMON_NAME | grep $CFG_DIR | grep -v grep | awk '{print $2}'`
    if [ -n "$PID" ]; then
        echo "taosd is running"
    else
        echo "taosd is not running"
    fi
}

case "$1" in
    start)
        if [ $UnknownSystem -eq 1 ]; then
            start_daemon
        else
            log_action_begin_msg "Starting TDengine..."
            $DAEMON_HTTPD &
            if start-stop-daemon --test --start --chuid "$USER:$GROUP" --background --make-pidfile --pidfile "$PID_FILE" --exec "$DAEMON" -- $APPARGS &> /dev/null; then

                touch "$PID_FILE" && chown "$USER":"$GROUP" "$PID_FILE"

                if [ -n "$MAX_OPEN_FILES" ]; then
                    ulimit -n $MAX_OPEN_FILES
                fi

                start-stop-daemon --start --chuid "$USER:$GROUP" --background --make-pidfile --pidfile "$PID_FILE" --exec "$DAEMON" -- $APPARGS

                log_end_msg $?
            fi
        fi
        ;;

    stop)
        if [ $UnknownSystem -eq 1 ]; then
            stop_daemon
        else
            log_action_begin_msg "Stopping TDengine..."
            pkill -9 $DAEMON_HTTPD_NAME
            set +e
            if [ -f "$PID_FILE" ]; then
                start-stop-daemon --stop --pidfile "$PID_FILE" --user "$USER" --retry=TERM/120/KILL/5 > /dev/null
                if [ $? -eq 1 ]; then
                    log_action_cont_msg "TSD is not running but pid file exists, cleaning up"
                elif [ $? -eq 3 ]; then
                    PID="`cat $PID_FILE`"
                    log_failure_msg "Failed to stop TDengine (pid $PID)"
                    exit 1
                fi
                rm -f "$PID_FILE"
            else
                log_action_cont_msg "TDengine was not running"
            fi
            log_action_end_msg 0
            set -e
        fi
        ;;

    restart|force-reload)
        if [ $UnknownSystem -eq 1 ]; then
            stop_daemon
            start_daemon
        else
            if [ -f "$PID_FILE" ]; then
                $0 stop
                sleep 1
            fi
            $0 start
        fi
        ;;
    status)
        if [ $UnknownSystem -eq 1 ]; then
            status_of_daemon
        else
            status_of_proc -p "$PID_FILE" "$DAEMON" "$NAME"
        fi
        ;;
    *)
        exit 1
        ;;
esac

exit 0
